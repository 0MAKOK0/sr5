
import React, { useState, useEffect, FormEvent } from 'react';
import { Task, TaskStatus } from '../types';
import { TASK_STATUS_OPTIONS } from '../constants';
import { XMarkIcon } from './Icons';

interface TaskFormModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (task: Task) => void;
  task: Task | null;
}

const TaskFormModal: React.FC<TaskFormModalProps> = ({ isOpen, onClose, onSave, task }) => {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [dueDate, setDueDate] = useState('');
  const [status, setStatus] = useState<TaskStatus>(TaskStatus.NEW);
  const [titleError, setTitleError] = useState('');

  useEffect(() => {
    if (task) {
      setTitle(task.title);
      setDescription(task.description || '');
      setDueDate(task.dueDate || '');
      setStatus(task.status);
    } else {
      setTitle('');
      setDescription('');
      setDueDate('');
      setStatus(TaskStatus.NEW);
    }
    setTitleError(''); // Reset error on open or task change
  }, [task, isOpen]);

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    if (!title.trim()) {
        setTitleError("Название обязательно для заполнения.");
        return;
    }
    setTitleError('');
    onSave({
      id: task ? task.id : '', // ID will be generated by hook if new
      title,
      description,
      dueDate: dueDate || undefined, // Ensure undefined if empty, not empty string
      status,
      createdAt: task ? task.createdAt : '' // Will be generated by hook if new
    });
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50 backdrop-blur-sm">
      <div className="bg-slate-800 p-6 rounded-lg shadow-xl w-full max-w-lg max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-2xl font-semibold text-blue-300">{task ? 'Редактировать Задачу' : 'Добавить Новую Задачу'}</h2>
          <button onClick={onClose} className="text-slate-400 hover:text-slate-200" aria-label="Закрыть">
            <XMarkIcon className="w-7 h-7" />
          </button>
        </div>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="title" className="block text-sm font-medium text-slate-300 mb-1">Название</label>
            <input
              type="text"
              id="title"
              value={title}
              onChange={(e) => {
                setTitle(e.target.value);
                if (titleError) setTitleError('');
              }}
              className={`w-full p-3 bg-slate-700 border rounded-md focus:ring-blue-500 focus:border-blue-500 text-slate-100 placeholder-slate-400 ${titleError ? 'border-red-500' : 'border-slate-600'}`}
              placeholder="например, Купить продукты"
              required
              aria-required="true"
              aria-describedby={titleError ? "title-error" : undefined}
            />
            {titleError && <p id="title-error" className="text-red-400 text-xs mt-1">{titleError}</p>}
          </div>
          <div className="mb-4">
            <label htmlFor="description" className="block text-sm font-medium text-slate-300 mb-1">Описание (Необязательно)</label>
            <textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              rows={4}
              className="w-full p-3 bg-slate-700 border border-slate-600 rounded-md focus:ring-blue-500 focus:border-blue-500 text-slate-100 placeholder-slate-400"
              placeholder="например, Купить молоко, яйца и хлеб"
            />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <div>
              <label htmlFor="dueDate" className="block text-sm font-medium text-slate-300 mb-1">Срок (Необязательно)</label>
              <input
                type="date"
                id="dueDate"
                value={dueDate}
                onChange={(e) => setDueDate(e.target.value)}
                className="w-full p-3 bg-slate-700 border border-slate-600 rounded-md focus:ring-blue-500 focus:border-blue-500 text-slate-100"
              />
            </div>
            <div>
              <label htmlFor="status" className="block text-sm font-medium text-slate-300 mb-1">Статус</label>
              <select
                id="status"
                value={status}
                onChange={(e) => setStatus(e.target.value as TaskStatus)}
                className="w-full p-3 bg-slate-700 border border-slate-600 rounded-md focus:ring-blue-500 focus:border-blue-500 text-slate-100"
              >
                {TASK_STATUS_OPTIONS.map(option => (
                  <option key={option.value} value={option.value}>{option.label}</option>
                ))}
              </select>
            </div>
          </div>
          <div className="flex justify-end space-x-3">
            <button
              type="button"
              onClick={onClose}
              className="py-2 px-4 bg-slate-600 hover:bg-slate-500 text-slate-100 font-semibold rounded-lg transition duration-150"
            >
              Отмена
            </button>
            <button
              type="submit"
              className="py-2 px-4 bg-blue-500 hover:bg-blue-600 text-white font-semibold rounded-lg shadow-md transition duration-150 transform hover:scale-105"
            >
              {task ? 'Сохранить Изменения' : 'Создать Задачу'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default TaskFormModal;